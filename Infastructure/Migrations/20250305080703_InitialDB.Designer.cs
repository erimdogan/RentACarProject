// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250305080703_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = new Guid("3593d41d-ad87-467b-a2fc-deefe77099df"),
                            BrandName = "Audi"
                        },
                        new
                        {
                            BrandId = new Guid("29b563dd-51ca-41a9-b70a-c116d1a49236"),
                            BrandName = "BMW"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Property<Guid>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("DailyPrice")
                        .HasMaxLength(50)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ModelYear")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.HasIndex("BrandId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            CarId = new Guid("b6bec2ed-6387-4c2d-97df-8dd2d79d0e99"),
                            BrandId = new Guid("3593d41d-ad87-467b-a2fc-deefe77099df"),
                            CarName = "A5 45 TFSI",
                            DailyPrice = 25.00m,
                            Description = "Good Family Sport Car",
                            ModelYear = 2024
                        },
                        new
                        {
                            CarId = new Guid("17d6d4c8-afc8-4689-bea6-671860186dd5"),
                            BrandId = new Guid("29b563dd-51ca-41a9-b70a-c116d1a49236"),
                            CarName = "320i",
                            DailyPrice = 20.00m,
                            Description = "Good sport car for young",
                            ModelYear = 2022
                        });
                });

            modelBuilder.Entity("Domain.Entities.CreditCard", b =>
                {
                    b.Property<Guid>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CardUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ValidDate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("CardId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CreditCards");

                    b.HasData(
                        new
                        {
                            CardId = new Guid("91c79146-4247-482b-9c6c-224dee8035e3"),
                            CardNumber = "1234123412341234",
                            CardUser = "Erim",
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Cvv = "123",
                            ValidDate = "12/25"
                        },
                        new
                        {
                            CardId = new Guid("b820905a-f5d4-4ec0-873c-e0f66fdeac8d"),
                            CardNumber = "1111111111111111",
                            CardUser = "Erim",
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Cvv = "124",
                            ValidDate = "12/25"
                        },
                        new
                        {
                            CardId = new Guid("cf55599f-d880-4723-ab05-fe2948086c62"),
                            CardNumber = "4321432143214321",
                            CardUser = "Mert",
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Cvv = "321",
                            ValidDate = "11/25"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("cc358324-5c06-4409-ac02-d4fb3017735d"),
                            CustomerEmail = "skjdfldskfj@gmail.com",
                            CustomerName = "Erim"
                        },
                        new
                        {
                            CustomerId = new Guid("9cafddf3-8cde-400f-b9f3-7bdcf76f6198"),
                            CustomerEmail = "akdjasdajkdsaj@gmail.com",
                            CustomerName = "Mert"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Rental", b =>
                {
                    b.Property<Guid>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RentEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentStatus")
                        .HasColumnType("int");

                    b.HasKey("RentId");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            RentId = new Guid("e591e122-9a1f-4680-8154-c1f68c4a563b"),
                            CarId = new Guid("b6bec2ed-6387-4c2d-97df-8dd2d79d0e99"),
                            CustomerId = new Guid("cc358324-5c06-4409-ac02-d4fb3017735d"),
                            RentEndDateTime = new DateTime(2025, 3, 6, 11, 7, 2, 702, DateTimeKind.Local).AddTicks(6313),
                            RentStartDateTime = new DateTime(2025, 3, 4, 11, 7, 2, 701, DateTimeKind.Local).AddTicks(4082),
                            RentStatus = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("_cars")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Entities.CreditCard", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("CreditCards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Rental", b =>
                {
                    b.HasOne("Domain.Entities.Car", "Car")
                        .WithMany("Rentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("_cars");
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("CreditCards");

                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
